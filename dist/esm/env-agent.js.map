{"version":3,"file":"env-agent.js","sources":["../../lib/utils.ts","../../lib/debug.ts","../../lib/env-agent.ts"],"sourcesContent":["export function isUndefined(value: unknown): value is undefined {\r\n    return typeof value === \"undefined\";\r\n}\r\n\r\nexport function hasOwnProperty<X extends {}, Y extends PropertyKey>(\r\n    obj: X,\r\n    prop: Y\r\n): obj is X & Record<Y, unknown> {\r\n    return obj.hasOwnProperty(prop);\r\n}\r\n\r\nexport function shallowMerge<T, U>(target: T, source: U): T & U {\r\n    return Object.assign({}, target, source);\r\n}\r\n\r\nexport function removeQuotes(value: string): string {\r\n    return value.replace(/(^['\"]|['\"]$)/g, \"\");\r\n}\r\n","const colors = {\r\n    red: \"\\x1b[31m\",\r\n    yellow: \"\\x1b[33m\",\r\n    green: \"\\x1b[32m\"\r\n};\r\n\r\nconst globals = {\r\n    reset: \"\\x1b[0m\",\r\n    bright: \"\\x1b[1m\"\r\n};\r\n\r\nexport type DebugColors = keyof typeof colors;\r\n\r\nexport function debug(message: string, color: DebugColors) {\r\n    const prefix = \"[ENV-AGENT] \";\r\n    const colorizedMessage = `${colors[color]}${prefix}${message}${globals.reset}`;\r\n\r\n    console.log(colorizedMessage);\r\n}\r\n","import path from \"path\";\r\nimport fs from \"fs\";\r\nimport os from \"os\";\r\n\r\nimport {\r\n    isUndefined,\r\n    hasOwnProperty,\r\n    shallowMerge,\r\n    removeQuotes\r\n} from \"./utils\";\r\nimport { debug, DebugColors } from \"./debug\";\r\n\r\nconst DOTENV_FILENAME = \".env\";\r\nconst DOTENV_LINE = /^\\s*([^\\#]+)\\s*=\\s*([^#]*)/m;\r\nconst DOTENV_EXPANSION = /\\$\\{?(\\w+)\\}?/g;\r\nconst DOTENV_EXPANSION_KEY = /\\$|\\{|\\}/g;\r\n\r\ninterface EnvType {\r\n    [key: string]: string;\r\n}\r\n\r\ntype ExpansionMode = \"none\" | \"project\" | \"machine\";\r\n\r\ninterface EnvManipulator {\r\n    /**\r\n     * Parses a .env file and returns an object containing the environment variables.\r\n     */\r\n    parse(file: Buffer | string): EnvType;\r\n\r\n    /**\r\n     * Loads the environment variables by reading the .env file and sets the variable\r\n     * if it does not exist.\r\n     */\r\n    load(options: ConfigurableOptions): EnvType;\r\n\r\n    /**\r\n     * Programmatically set environment variables that are only available in the current process.\r\n     */\r\n    set(key: string, value: string): void;\r\n\r\n    /**\r\n     * Retrieve an environment variable from the current process.\r\n     */\r\n    get(key?: string): string | undefined;\r\n\r\n    /**\r\n     * Default filename for the .env file.\r\n     */\r\n    DOTENV_FILENAME: string;\r\n}\r\n\r\ninterface ConfigurableOptions {\r\n    /**\r\n     * When attempting to load the .env file, specify whether errors should be thrown or not.\r\n     *\r\n     * If set to false, operations will continue as normal.\r\n     *\r\n     * Defaults to `true`.\r\n     */\r\n    silent?: boolean;\r\n\r\n    /**\r\n     * Choose to expand variables defined in your .env file. Select the expansion mode\r\n     * that best suits your needs.\r\n     *\r\n     * - `none` - No expansion will be performed.\r\n     * - `project` - Expand variables defined in the .env file.\r\n     * - `machine` - Expand variables defined on your machine's environment.\r\n     *\r\n     * Defaults to `none`.\r\n     */\r\n    expand?: ExpansionMode;\r\n\r\n    /**\r\n     * When parsing variables, ensure that values are defined before attempting to set them.\r\n     * Expanding variables will ensure the value is also defined. If not, the variable\r\n     * that was attempted will be removed from the end result.\r\n     *\r\n     * If `template` is set and `strict` is `true`, any missing variables will throw an error,\r\n     * and any variables that are defined in the template but not in the current .env file\r\n     * will be removed from the end result.\r\n     *\r\n     * Defaults to `false`.\r\n     */\r\n    strict?: boolean;\r\n\r\n    /**\r\n     * The path to the .env file. Use only if you are attempting to load a file that is not\r\n     * in the root directory.\r\n     *\r\n     * Defaults to `process.cwd()`.\r\n     */\r\n    path?: string;\r\n\r\n    /**\r\n     * Control wether or not to overwrite existing environment variables.\r\n     */\r\n    overwrite?: boolean;\r\n\r\n    /**\r\n     * The encoding to use when reading the .env file.\r\n     *\r\n     * Defaults to `utf8`.\r\n     */\r\n    encoding?: BufferEncoding;\r\n\r\n    /**\r\n     * Show debug messages when loading the .env file.\r\n     *\r\n     * Includes errors, warnings, and success messages.\r\n     *\r\n     * Defaults to `false`.\r\n     */\r\n    debug?: boolean;\r\n\r\n    /**\r\n     * Uses another .env file as a template for the current .env file,\r\n     * such as a .env.example file. Any missing variables will be removed\r\n     * from the end result unless `strict` is set to `true`, in which case\r\n     * an error will be thrown.\r\n     *\r\n     * Defaults to `undefined`.\r\n     */\r\n    template?: string;\r\n}\r\n\r\nconst defaults: ConfigurableOptions = {\r\n    silent: false,\r\n    strict: false,\r\n    overwrite: false,\r\n    encoding: \"utf8\",\r\n    expand: \"none\",\r\n    debug: false,\r\n    template: undefined\r\n};\r\n\r\nclass EnvAgent implements EnvManipulator {\r\n    private $options: ConfigurableOptions = {};\r\n\r\n    public DOTENV_FILENAME = DOTENV_FILENAME;\r\n\r\n    get options() {\r\n        return this.$options;\r\n    }\r\n\r\n    get isProduction() {\r\n        return this.get(\"NODE_ENV\") === \"production\";\r\n    }\r\n\r\n    get isDevelopment() {\r\n        return this.get(\"NODE_ENV\") === \"development\";\r\n    }\r\n\r\n    private resolvePathName(): string {\r\n        if (this.options.path) {\r\n            return path.resolve(this.options.path);\r\n        } else {\r\n            return path.resolve(process.cwd(), DOTENV_FILENAME);\r\n        }\r\n    }\r\n\r\n    private handleErrorException(error: Error): void {\r\n        this.handleDebug(error.message, \"red\");\r\n\r\n        if (this.options.silent) {\r\n            return;\r\n        }\r\n\r\n        throw error;\r\n    }\r\n\r\n    private handleDebug(message: string, color: DebugColors): void {\r\n        if (this.options.debug) {\r\n            debug(message, color);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of EnvAgent. Not sure why you would want to\r\n     * do this, but it's here if you need it.\r\n     */\r\n    public create(): EnvAgent {\r\n        return new EnvAgent();\r\n    }\r\n\r\n    /**\r\n     * Parses a Buffer or string and returns an object containing the environment variables.\r\n     *\r\n     * ```\r\n     * const env = envAgent.parse(fs.readFileSync(\".env\", \"utf8\"));\r\n     * // or\r\n     * const env = envAgent.parse(`FOO=bar\\nBAR=baz`);\r\n     * ```\r\n     */\r\n    public parse(file: Buffer | string, bypassStrict = false): EnvType {\r\n        try {\r\n            const environmentVariables: EnvType = {};\r\n            const fileAsString = file.toString();\r\n            const lines = fileAsString.replace(os.EOL, \"\\n\").split(/\\n/);\r\n\r\n            for (const potentialLine of lines) {\r\n                const isMatch = DOTENV_LINE.test(potentialLine);\r\n\r\n                if (!isMatch) {\r\n                    continue;\r\n                }\r\n\r\n                const line = potentialLine.match(DOTENV_LINE);\r\n\r\n                if (line === null) {\r\n                    continue;\r\n                }\r\n\r\n                const keyValuePairs = line.slice(1);\r\n\r\n                let key = keyValuePairs[0] ?? \"\";\r\n                let value = keyValuePairs[1] ?? \"\";\r\n\r\n                key = key.trim();\r\n                value = value.trim();\r\n\r\n                if (key) {\r\n                    if (this.options.strict && !value && !bypassStrict) {\r\n                        continue;\r\n                    }\r\n\r\n                    environmentVariables[key] = removeQuotes(value);\r\n                }\r\n            }\r\n\r\n            return environmentVariables;\r\n        } catch (error: any) {\r\n            this.handleErrorException(error);\r\n\r\n            return {};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The main entry point for loading the .env file. This method will\r\n     * attempt to load the .env file and set the environment variables.\r\n     *\r\n     * You can pass in an object to configure the behavior of the method.\r\n     *\r\n     * ```\r\n     * const env = envAgent.load();\r\n     * ```\r\n     */\r\n    public load(options: ConfigurableOptions = {}): EnvType {\r\n        this.$options = shallowMerge(defaults, options);\r\n\r\n        try {\r\n            const envPath = this.resolvePathName();\r\n            const encoding = this.options.encoding;\r\n\r\n            const file = fs.readFileSync(envPath, { encoding });\r\n\r\n            let template: EnvType | undefined = undefined;\r\n\r\n            if (this.options.template) {\r\n                const templateFile = fs.readFileSync(this.options.template, {\r\n                    encoding\r\n                });\r\n\r\n                const templateEnv = this.parse(templateFile, true);\r\n\r\n                if (Object.keys(templateEnv).length === 0) {\r\n                    throw new Error(\r\n                        \"A template was provided, but it is empty. You may have an empty template file.\"\r\n                    );\r\n                }\r\n\r\n                template = templateEnv;\r\n            }\r\n\r\n            this.handleDebug(\"Found .env file\", \"green\");\r\n\r\n            const env = this.parse(file);\r\n\r\n            this.handleDebug(\"Parsed .env file\", \"green\");\r\n\r\n            this.expand(env, this.options.expand, false);\r\n\r\n            if (template) {\r\n                const enforcedKeys = Object.keys(template);\r\n                const envKeys = Object.keys(env);\r\n\r\n                if (envKeys.length === 0) {\r\n                    throw new Error(\r\n                        \"The .env file is empty. You may have an empty .env file.\"\r\n                    );\r\n                }\r\n\r\n                for (const key of envKeys) {\r\n                    if (enforcedKeys.includes(key)) {\r\n                        continue;\r\n                    }\r\n\r\n                    const message = `The environment variable \"${key}\" is not in your .env template file.`;\r\n\r\n                    if (this.options.strict) {\r\n                        this.handleErrorException(new Error(message));\r\n                    } else {\r\n                        this.handleDebug(message, \"yellow\");\r\n                    }\r\n\r\n                    delete env[key];\r\n                }\r\n            }\r\n\r\n            for (const key in env) {\r\n                this.set(key, env[key]);\r\n            }\r\n\r\n            return env;\r\n        } catch (error: any) {\r\n            this.handleErrorException(error);\r\n\r\n            return {};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A method to expand variables defined in your .env file. It is\r\n     * recommended to expand variables when calling `load()`, but this\r\n     * method is available if you need to expand variables at a later\r\n     * time.\r\n     */\r\n    public expand(\r\n        variables: EnvType = {},\r\n        mode: ExpansionMode = \"project\",\r\n        forceSet: boolean = true\r\n    ): EnvType {\r\n        if (mode === \"none\" || !mode) {\r\n            return variables;\r\n        }\r\n\r\n        const env = mode === \"project\" ? variables : process.env;\r\n\r\n        for (const key in variables) {\r\n            const value = variables[key];\r\n\r\n            if (typeof value !== \"string\") {\r\n                continue;\r\n            }\r\n\r\n            const match = value.match(DOTENV_EXPANSION);\r\n\r\n            if (match === null) {\r\n                continue;\r\n            }\r\n\r\n            const attemptedExpansion = match.reduce((acc, variable) => {\r\n                const variableName = variable.replace(DOTENV_EXPANSION_KEY, \"\");\r\n\r\n                if (variableName in env) {\r\n                    const variableValue = env[variableName];\r\n\r\n                    if (isUndefined(variableValue)) {\r\n                        return acc.replace(variable, \"\");\r\n                    }\r\n\r\n                    return acc.replace(variable, variableValue);\r\n                }\r\n\r\n                return acc;\r\n            }, value);\r\n\r\n            if (this.options.strict && !attemptedExpansion) {\r\n                delete variables[key];\r\n                continue;\r\n            }\r\n\r\n            const expandedValue = removeQuotes(attemptedExpansion.trim());\r\n\r\n            variables[key] = expandedValue;\r\n\r\n            if (forceSet) {\r\n                process.env[key] = expandedValue;\r\n                this.handleDebug(`Expanded ${key}`, \"green\");\r\n            }\r\n        }\r\n\r\n        return variables;\r\n    }\r\n\r\n    /**\r\n     * Retrieve a single environment variable from `process.env`.\r\n     */\r\n    public get(key?: string): string | undefined {\r\n        if (isUndefined(key)) {\r\n            this.handleDebug(\r\n                \"Attempted to retrieve an environment variable, but no key was passed\",\r\n                \"yellow\"\r\n            );\r\n\r\n            return \"\";\r\n        }\r\n\r\n        const value = process.env[key];\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Sets a single environment variable in `process.env`.\r\n     */\r\n    public set(key: string, value: string, overwrite = false): void {\r\n        const allowOverwrite = overwrite || this.options.overwrite;\r\n\r\n        if (hasOwnProperty(process.env, key) && allowOverwrite !== true) {\r\n            this.handleDebug(\r\n                `Environment variable ${key} already exists, skipping`,\r\n                \"yellow\"\r\n            );\r\n\r\n            return;\r\n        }\r\n\r\n        if (this.$options.strict && !value) {\r\n            this.handleDebug(\r\n                `Environment variable ${key} is not defined, skipping`,\r\n                \"yellow\"\r\n            );\r\n\r\n            return;\r\n        }\r\n\r\n        process.env[key] = value;\r\n        this.handleDebug(`Set ${key} to process.env`, \"green\");\r\n    }\r\n\r\n    /**\r\n     * Deletes a single environment variable from `process.env`.\r\n     */\r\n    public delete(key: string): void {\r\n        if (hasOwnProperty(process.env, key)) {\r\n            delete process.env[key];\r\n            this.handleDebug(`Deleted ${key} from process.env`, \"green\");\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        this.$options = {};\r\n    }\r\n}\r\n\r\nconst envAgent = new EnvAgent();\r\n\r\nexport default envAgent;\r\n"],"names":["isUndefined","value","hasOwnProperty","obj","prop","shallowMerge","target","source","Object","assign","removeQuotes","replace","colors","red","yellow","green","globals","reset","bright","debug","message","color","prefix","colorizedMessage","console","log","DOTENV_FILENAME","DOTENV_LINE","DOTENV_EXPANSION","DOTENV_EXPANSION_KEY","defaults","silent","strict","overwrite","encoding","expand","template","undefined","EnvAgent","$options","get","options","path","resolve","process","cwd","error","handleDebug","file","bypassStrict","environmentVariables","fileAsString","toString","lines","os","EOL","split","potentialLine","isMatch","test","line","match","keyValuePairs","slice","key","trim","handleErrorException","envPath","resolvePathName","fs","readFileSync","templateFile","templateEnv","parse","keys","length","Error","env","enforcedKeys","envKeys","includes","set","variables","mode","forceSet","attemptedExpansion","reduce","acc","variable","variableName","variableValue","expandedValue","allowOverwrite","envAgent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,SAASA,WAAW,CAACC,KAAc,EAAsB;EAC5D,OAAO,OAAOA,KAAK,KAAK,WAAW,CAAA;AACvC,CAAA;AAEO,SAASC,cAAc,CAC1BC,GAAM,EACNC,IAAO,EACsB;AAC7B,EAAA,OAAOD,GAAG,CAACD,cAAc,CAACE,IAAI,CAAC,CAAA;AACnC,CAAA;AAEO,SAASC,YAAY,CAAOC,MAAS,EAAEC,MAAS,EAAS;EAC5D,OAAOC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEH,MAAM,EAAEC,MAAM,CAAC,CAAA;AAC5C,CAAA;AAEO,SAASG,YAAY,CAACT,KAAa,EAAU;AAChD,EAAA,OAAOA,KAAK,CAACU,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAA;AAC9C;;ACjBA,IAAMC,MAAM,GAAG;AACXC,EAAAA,GAAG,EAAE,UAAU;AACfC,EAAAA,MAAM,EAAE,UAAU;AAClBC,EAAAA,KAAK,EAAE,UAAA;AACX,CAAC,CAAA;AAED,IAAMC,OAAO,GAAG;AACZC,EAAAA,KAAK,EAAE,SAAS;AAChBC,EAAAA,MAAM,EAAE,SAAA;AACZ,CAAC,CAAA;AAIM,SAASC,KAAK,CAACC,OAAe,EAAEC,KAAkB,EAAE;EACvD,IAAMC,MAAM,GAAG,cAAc,CAAA;AAC7B,EAAA,IAAMC,gBAAgB,GAAA,EAAA,CAAA,MAAA,CAAMX,MAAM,CAACS,KAAK,CAAC,CAAA,CAAA,MAAA,CAAGC,MAAM,CAAA,CAAA,MAAA,CAAGF,OAAO,CAAA,CAAA,MAAA,CAAGJ,OAAO,CAACC,KAAK,CAAE,CAAA;AAE9EO,EAAAA,OAAO,CAACC,GAAG,CAACF,gBAAgB,CAAC,CAAA;AACjC;;ACNA,IAAMG,eAAe,GAAG,MAAM,CAAA;AAC9B,IAAMC,WAAW,GAAG,6BAA6B,CAAA;AACjD,IAAMC,gBAAgB,GAAG,gBAAgB,CAAA;AACzC,IAAMC,oBAAoB,GAAG,WAAW,CAAA;AA+GxC,IAAMC,QAA6B,GAAG;AAClCC,EAAAA,MAAM,EAAE,KAAK;AACbC,EAAAA,MAAM,EAAE,KAAK;AACbC,EAAAA,SAAS,EAAE,KAAK;AAChBC,EAAAA,QAAQ,EAAE,MAAM;AAChBC,EAAAA,MAAM,EAAE,MAAM;AACdhB,EAAAA,KAAK,EAAE,KAAK;AACZiB,EAAAA,QAAQ,EAAEC,SAAAA;AACd,CAAC,CAAA;AAAC,IAEIC,QAAQ,gBAAA,YAAA;AAAA,EAAA,SAAA,QAAA,GAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAC8B,EAAE,CAAA,CAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAEjBZ,eAAe,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,YAAA,CAAA,QAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,SAAA;AAAA,IAAA,GAAA,EAExC,SAAc,GAAA,GAAA;MACV,OAAO,IAAI,CAACa,QAAQ,CAAA;AACxB,KAAA;AAAC,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,cAAA;AAAA,IAAA,GAAA,EAED,SAAmB,GAAA,GAAA;AACf,MAAA,OAAO,IAAI,CAACC,GAAG,CAAC,UAAU,CAAC,KAAK,YAAY,CAAA;AAChD,KAAA;AAAC,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,GAAA,EAED,SAAoB,GAAA,GAAA;AAChB,MAAA,OAAO,IAAI,CAACA,GAAG,CAAC,UAAU,CAAC,KAAK,aAAa,CAAA;AACjD,KAAA;AAAC,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,iBAAA;AAAA,IAAA,KAAA,EAED,SAAkC,eAAA,GAAA;AAC9B,MAAA,IAAI,IAAI,CAACC,OAAO,CAACC,IAAI,EAAE;QACnB,OAAOA,IAAI,CAACC,OAAO,CAAC,IAAI,CAACF,OAAO,CAACC,IAAI,CAAC,CAAA;AAC1C,OAAC,MAAM;QACH,OAAOA,IAAI,CAACC,OAAO,CAACC,OAAO,CAACC,GAAG,EAAE,EAAEnB,eAAe,CAAC,CAAA;AACvD,OAAA;AACJ,KAAA;AAAC,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,sBAAA;IAAA,KAED,EAAA,SAAA,oBAAA,CAA6BoB,KAAY,EAAQ;MAC7C,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC1B,OAAO,EAAE,KAAK,CAAC,CAAA;AAEtC,MAAA,IAAI,IAAI,CAACqB,OAAO,CAACV,MAAM,EAAE;AACrB,QAAA,OAAA;AACJ,OAAA;AAEA,MAAA,MAAMe,KAAK,CAAA;AACf,KAAA;AAAC,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAED,SAAoB1B,WAAAA,CAAAA,OAAe,EAAEC,KAAkB,EAAQ;AAC3D,MAAA,IAAI,IAAI,CAACoB,OAAO,CAACtB,KAAK,EAAE;AACpBA,QAAAA,KAAK,CAACC,OAAO,EAAEC,KAAK,CAAC,CAAA;AACzB,OAAA;AACJ,KAAA;;AAEA;AACJ;AACA;AACA;AAHI,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,QAAA;AAAA,IAAA,KAAA,EAIA,SAA0B,MAAA,GAAA;MACtB,OAAO,IAAIiB,QAAQ,EAAE,CAAA;AACzB,KAAA;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARI,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,OAAA;IAAA,KASA,EAAA,SAAA,KAAA,CAAaU,IAAqB,EAAiC;MAAA,IAA/BC,YAAY,uEAAG,KAAK,CAAA;MACpD,IAAI;QACA,IAAMC,oBAA6B,GAAG,EAAE,CAAA;AACxC,QAAA,IAAMC,YAAY,GAAGH,IAAI,CAACI,QAAQ,EAAE,CAAA;AACpC,QAAA,IAAMC,KAAK,GAAGF,YAAY,CAACxC,OAAO,CAAC2C,EAAE,CAACC,GAAG,EAAE,IAAI,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC,CAAA;AAAC,QAAA,IAAA,SAAA,GAAA,0BAAA,CAEjCH,KAAK,CAAA;AAAA,UAAA,KAAA,CAAA;AAAA,QAAA,IAAA;UAAjC,KAAmC,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;AAAA,YAAA,IAAA,eAAA,EAAA,gBAAA,CAAA;AAAA,YAAA,IAAxBI,aAAa,GAAA,KAAA,CAAA,KAAA,CAAA;AACpB,YAAA,IAAMC,OAAO,GAAG/B,WAAW,CAACgC,IAAI,CAACF,aAAa,CAAC,CAAA;YAE/C,IAAI,CAACC,OAAO,EAAE;AACV,cAAA,SAAA;AACJ,aAAA;AAEA,YAAA,IAAME,IAAI,GAAGH,aAAa,CAACI,KAAK,CAAClC,WAAW,CAAC,CAAA;YAE7C,IAAIiC,IAAI,KAAK,IAAI,EAAE;AACf,cAAA,SAAA;AACJ,aAAA;AAEA,YAAA,IAAME,aAAa,GAAGF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC,CAAA;AAEnC,YAAA,IAAIC,IAAG,GAAGF,CAAAA,eAAAA,GAAAA,aAAa,CAAC,CAAC,CAAC,6DAAI,EAAE,CAAA;AAChC,YAAA,IAAI7D,MAAK,GAAG6D,CAAAA,gBAAAA,GAAAA,aAAa,CAAC,CAAC,CAAC,+DAAI,EAAE,CAAA;AAElCE,YAAAA,IAAG,GAAGA,IAAG,CAACC,IAAI,EAAE,CAAA;AAChBhE,YAAAA,MAAK,GAAGA,MAAK,CAACgE,IAAI,EAAE,CAAA;AAEpB,YAAA,IAAID,IAAG,EAAE;cACL,IAAI,IAAI,CAACvB,OAAO,CAACT,MAAM,IAAI,CAAC/B,MAAK,IAAI,CAACgD,YAAY,EAAE;AAChD,gBAAA,SAAA;AACJ,eAAA;AAEAC,cAAAA,oBAAoB,CAACc,IAAG,CAAC,GAAGtD,YAAY,CAACT,MAAK,CAAC,CAAA;AACnD,aAAA;AACJ,WAAA;AAAC,SAAA,CAAA,OAAA,GAAA,EAAA;AAAA,UAAA,SAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AAAA,SAAA,SAAA;AAAA,UAAA,SAAA,CAAA,CAAA,EAAA,CAAA;AAAA,SAAA;AAED,QAAA,OAAOiD,oBAAoB,CAAA;OAC9B,CAAC,OAAOJ,KAAU,EAAE;AACjB,QAAA,IAAI,CAACoB,oBAAoB,CAACpB,KAAK,CAAC,CAAA;AAEhC,QAAA,OAAO,EAAE,CAAA;AACb,OAAA;AACJ,KAAA;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATI,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,MAAA;AAAA,IAAA,KAAA,EAUA,SAAwD,IAAA,GAAA;MAAA,IAA5CL,OAA4B,GAAG,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,EAAE,CAAA;MACzC,IAAI,CAACF,QAAQ,GAAGlC,YAAY,CAACyB,QAAQ,EAAEW,OAAO,CAAC,CAAA;MAE/C,IAAI;AACA,QAAA,IAAM0B,OAAO,GAAG,IAAI,CAACC,eAAe,EAAE,CAAA;AACtC,QAAA,IAAMlC,QAAQ,GAAG,IAAI,CAACO,OAAO,CAACP,QAAQ,CAAA;AAEtC,QAAA,IAAMc,KAAI,GAAGqB,EAAE,CAACC,YAAY,CAACH,OAAO,EAAE;AAAEjC,UAAAA,QAAQ,EAARA,QAAAA;AAAS,SAAC,CAAC,CAAA;QAEnD,IAAIE,QAA6B,GAAGC,SAAS,CAAA;AAE7C,QAAA,IAAI,IAAI,CAACI,OAAO,CAACL,QAAQ,EAAE;UACvB,IAAMmC,YAAY,GAAGF,EAAE,CAACC,YAAY,CAAC,IAAI,CAAC7B,OAAO,CAACL,QAAQ,EAAE;AACxDF,YAAAA,QAAQ,EAARA,QAAAA;AACJ,WAAC,CAAC,CAAA;UAEF,IAAMsC,WAAW,GAAG,IAAI,CAACC,KAAK,CAACF,YAAY,EAAE,IAAI,CAAC,CAAA;UAElD,IAAI/D,MAAM,CAACkE,IAAI,CAACF,WAAW,CAAC,CAACG,MAAM,KAAK,CAAC,EAAE;AACvC,YAAA,MAAM,IAAIC,KAAK,CACX,gFAAgF,CACnF,CAAA;AACL,WAAA;AAEAxC,UAAAA,QAAQ,GAAGoC,WAAW,CAAA;AAC1B,SAAA;AAEA,QAAA,IAAI,CAACzB,WAAW,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAA;AAE5C,QAAA,IAAM8B,GAAG,GAAG,IAAI,CAACJ,KAAK,CAACzB,KAAI,CAAC,CAAA;AAE5B,QAAA,IAAI,CAACD,WAAW,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAA;AAE7C,QAAA,IAAI,CAACZ,MAAM,CAAC0C,GAAG,EAAE,IAAI,CAACpC,OAAO,CAACN,MAAM,EAAE,KAAK,CAAC,CAAA;AAE5C,QAAA,IAAIC,QAAQ,EAAE;AACV,UAAA,IAAM0C,YAAY,GAAGtE,MAAM,CAACkE,IAAI,CAACtC,QAAQ,CAAC,CAAA;AAC1C,UAAA,IAAM2C,OAAO,GAAGvE,MAAM,CAACkE,IAAI,CAACG,GAAG,CAAC,CAAA;AAEhC,UAAA,IAAIE,OAAO,CAACJ,MAAM,KAAK,CAAC,EAAE;AACtB,YAAA,MAAM,IAAIC,KAAK,CACX,0DAA0D,CAC7D,CAAA;AACL,WAAA;AAEA,UAAA,KAAA,IAAA,EAAA,GAAA,CAAA,EAAA,QAAA,GAAkBG,OAAO,EAAE,EAAA,GAAA,QAAA,CAAA,MAAA,EAAA,EAAA,EAAA,EAAA;AAAtB,YAAA,IAAMf,KAAG,GAAA,QAAA,CAAA,EAAA,CAAA,CAAA;AACV,YAAA,IAAIc,YAAY,CAACE,QAAQ,CAAChB,KAAG,CAAC,EAAE;AAC5B,cAAA,SAAA;AACJ,aAAA;YAEA,IAAM5C,OAAO,GAAgC4C,6BAAAA,CAAAA,MAAAA,CAAAA,KAAG,EAAsC,uCAAA,CAAA,CAAA;AAEtF,YAAA,IAAI,IAAI,CAACvB,OAAO,CAACT,MAAM,EAAE;cACrB,IAAI,CAACkC,oBAAoB,CAAC,IAAIU,KAAK,CAACxD,OAAO,CAAC,CAAC,CAAA;AACjD,aAAC,MAAM;AACH,cAAA,IAAI,CAAC2B,WAAW,CAAC3B,OAAO,EAAE,QAAQ,CAAC,CAAA;AACvC,aAAA;YAEA,OAAOyD,GAAG,CAACb,KAAG,CAAC,CAAA;AACnB,WAAA;AACJ,SAAA;AAEA,QAAA,KAAK,IAAMA,KAAG,IAAIa,GAAG,EAAE;UACnB,IAAI,CAACI,GAAG,CAACjB,KAAG,EAAEa,GAAG,CAACb,KAAG,CAAC,CAAC,CAAA;AAC3B,SAAA;AAEA,QAAA,OAAOa,GAAG,CAAA;OACb,CAAC,OAAO/B,KAAU,EAAE;AACjB,QAAA,IAAI,CAACoB,oBAAoB,CAACpB,KAAK,CAAC,CAAA;AAEhC,QAAA,OAAO,EAAE,CAAA;AACb,OAAA;AACJ,KAAA;;AAEA;AACJ;AACA;AACA;AACA;AACA;AALI,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,QAAA;AAAA,IAAA,KAAA,EAMA,SAIW,MAAA,GAAA;MAAA,IAHPoC,SAAkB,GAAG,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,EAAE,CAAA;MAAA,IACvBC,IAAmB,uEAAG,SAAS,CAAA;MAAA,IAC/BC,QAAiB,uEAAG,IAAI,CAAA;AAExB,MAAA,IAAID,IAAI,KAAK,MAAM,IAAI,CAACA,IAAI,EAAE;AAC1B,QAAA,OAAOD,SAAS,CAAA;AACpB,OAAA;MAEA,IAAML,GAAG,GAAGM,IAAI,KAAK,SAAS,GAAGD,SAAS,GAAGtC,OAAO,CAACiC,GAAG,CAAA;AAExD,MAAA,KAAK,IAAMb,KAAG,IAAIkB,SAAS,EAAE;AACzB,QAAA,IAAMjF,OAAK,GAAGiF,SAAS,CAAClB,KAAG,CAAC,CAAA;AAE5B,QAAA,IAAI,OAAO/D,OAAK,KAAK,QAAQ,EAAE;AAC3B,UAAA,SAAA;AACJ,SAAA;AAEA,QAAA,IAAM4D,KAAK,GAAG5D,OAAK,CAAC4D,KAAK,CAACjC,gBAAgB,CAAC,CAAA;QAE3C,IAAIiC,KAAK,KAAK,IAAI,EAAE;AAChB,UAAA,SAAA;AACJ,SAAA;QAEA,IAAMwB,kBAAkB,GAAGxB,KAAK,CAACyB,MAAM,CAAC,UAACC,GAAG,EAAEC,QAAQ,EAAK;UACvD,IAAMC,YAAY,GAAGD,QAAQ,CAAC7E,OAAO,CAACkB,oBAAoB,EAAE,EAAE,CAAC,CAAA;UAE/D,IAAI4D,YAAY,IAAIZ,GAAG,EAAE;AACrB,YAAA,IAAMa,aAAa,GAAGb,GAAG,CAACY,YAAY,CAAC,CAAA;AAEvC,YAAA,IAAIzF,WAAW,CAAC0F,aAAa,CAAC,EAAE;AAC5B,cAAA,OAAOH,GAAG,CAAC5E,OAAO,CAAC6E,QAAQ,EAAE,EAAE,CAAC,CAAA;AACpC,aAAA;AAEA,YAAA,OAAOD,GAAG,CAAC5E,OAAO,CAAC6E,QAAQ,EAAEE,aAAa,CAAC,CAAA;AAC/C,WAAA;AAEA,UAAA,OAAOH,GAAG,CAAA;SACb,EAAEtF,OAAK,CAAC,CAAA;QAET,IAAI,IAAI,CAACwC,OAAO,CAACT,MAAM,IAAI,CAACqD,kBAAkB,EAAE;UAC5C,OAAOH,SAAS,CAAClB,KAAG,CAAC,CAAA;AACrB,UAAA,SAAA;AACJ,SAAA;QAEA,IAAM2B,aAAa,GAAGjF,YAAY,CAAC2E,kBAAkB,CAACpB,IAAI,EAAE,CAAC,CAAA;AAE7DiB,QAAAA,SAAS,CAAClB,KAAG,CAAC,GAAG2B,aAAa,CAAA;AAE9B,QAAA,IAAIP,QAAQ,EAAE;AACVxC,UAAAA,OAAO,CAACiC,GAAG,CAACb,KAAG,CAAC,GAAG2B,aAAa,CAAA;AAChC,UAAA,IAAI,CAAC5C,WAAW,CAAA,WAAA,CAAA,MAAA,CAAaiB,KAAG,CAAA,EAAI,OAAO,CAAC,CAAA;AAChD,SAAA;AACJ,OAAA;AAEA,MAAA,OAAOkB,SAAS,CAAA;AACpB,KAAA;;AAEA;AACJ;AACA;AAFI,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,KAAA;IAAA,KAGA,EAAA,SAAA,GAAA,CAAWlB,GAAY,EAAsB;AACzC,MAAA,IAAIhE,WAAW,CAACgE,GAAG,CAAC,EAAE;AAClB,QAAA,IAAI,CAACjB,WAAW,CACZ,sEAAsE,EACtE,QAAQ,CACX,CAAA;AAED,QAAA,OAAO,EAAE,CAAA;AACb,OAAA;AAEA,MAAA,IAAM9C,KAAK,GAAG2C,OAAO,CAACiC,GAAG,CAACb,GAAG,CAAC,CAAA;AAC9B,MAAA,OAAO/D,KAAK,CAAA;AAChB,KAAA;;AAEA;AACJ;AACA;AAFI,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,KAAA;AAAA,IAAA,KAAA,EAGA,SAAW+D,GAAAA,CAAAA,GAAW,EAAE/D,KAAa,EAA2B;MAAA,IAAzBgC,SAAS,uEAAG,KAAK,CAAA;MACpD,IAAM2D,cAAc,GAAG3D,SAAS,IAAI,IAAI,CAACQ,OAAO,CAACR,SAAS,CAAA;AAE1D,MAAA,IAAI/B,cAAc,CAAC0C,OAAO,CAACiC,GAAG,EAAEb,GAAG,CAAC,IAAI4B,cAAc,KAAK,IAAI,EAAE;AAC7D,QAAA,IAAI,CAAC7C,WAAW,CAAA,uBAAA,CAAA,MAAA,CACYiB,GAAG,EAAA,2BAAA,CAAA,EAC3B,QAAQ,CACX,CAAA;AAED,QAAA,OAAA;AACJ,OAAA;MAEA,IAAI,IAAI,CAACzB,QAAQ,CAACP,MAAM,IAAI,CAAC/B,KAAK,EAAE;AAChC,QAAA,IAAI,CAAC8C,WAAW,CAAA,uBAAA,CAAA,MAAA,CACYiB,GAAG,EAAA,2BAAA,CAAA,EAC3B,QAAQ,CACX,CAAA;AAED,QAAA,OAAA;AACJ,OAAA;AAEApB,MAAAA,OAAO,CAACiC,GAAG,CAACb,GAAG,CAAC,GAAG/D,KAAK,CAAA;AACxB,MAAA,IAAI,CAAC8C,WAAW,CAAA,MAAA,CAAA,MAAA,CAAQiB,GAAG,EAAA,iBAAA,CAAA,EAAmB,OAAO,CAAC,CAAA;AAC1D,KAAA;;AAEA;AACJ;AACA;AAFI,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,QAAA;IAAA,KAGA,EAAA,SAAA,OAAA,CAAcA,GAAW,EAAQ;MAC7B,IAAI9D,cAAc,CAAC0C,OAAO,CAACiC,GAAG,EAAEb,GAAG,CAAC,EAAE;AAClC,QAAA,OAAOpB,OAAO,CAACiC,GAAG,CAACb,GAAG,CAAC,CAAA;AACvB,QAAA,IAAI,CAACjB,WAAW,CAAA,UAAA,CAAA,MAAA,CAAYiB,GAAG,EAAA,mBAAA,CAAA,EAAqB,OAAO,CAAC,CAAA;AAChE,OAAA;AACJ,KAAA;AAAC,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,OAAA;AAAA,IAAA,KAAA,EAED,SAAqB,KAAA,GAAA;AACjB,MAAA,IAAI,CAACzB,QAAQ,GAAG,EAAE,CAAA;AACtB,KAAA;AAAC,GAAA,CAAA,CAAA,CAAA;AAAA,EAAA,OAAA,QAAA,CAAA;AAAA,CAAA,EAAA,CAAA;AAGL,IAAMsD,QAAQ,GAAG,IAAIvD,QAAQ;;;;"}