{"version":3,"file":"env-agent.cjs","sources":["../../lib/utils.ts","../../lib/debug.ts","../../lib/env-agent.ts"],"sourcesContent":["export function isUndefined(value: unknown): value is undefined {\r\n    return typeof value === \"undefined\";\r\n}\r\n\r\nexport function hasOwnProperty<X extends {}, Y extends PropertyKey>(\r\n    obj: X,\r\n    prop: Y\r\n): obj is X & Record<Y, unknown> {\r\n    return obj.hasOwnProperty(prop);\r\n}\r\n\r\nexport function shallowMerge<T, U>(target: T, source: U): T & U {\r\n    return Object.assign({}, target, source);\r\n}\r\n","const colors = {\r\n    red: \"\\x1b[31m\",\r\n    yellow: \"\\x1b[33m\",\r\n    green: \"\\x1b[32m\"\r\n};\r\n\r\nconst globals = {\r\n    reset: \"\\x1b[0m\",\r\n    bright: \"\\x1b[1m\"\r\n};\r\n\r\nexport type DebugColors = keyof typeof colors;\r\n\r\nexport function debug(message: string, color: DebugColors) {\r\n    const prefix = \"[ENV-AGENT] \";\r\n    const colorizedMessage = `${colors[color]}${prefix}${message}${globals.reset}`;\r\n\r\n    console.log(colorizedMessage);\r\n}\r\n","import path from \"path\";\r\nimport fs from \"fs\";\r\nimport os from \"os\";\r\n\r\nimport { isUndefined, hasOwnProperty, shallowMerge } from \"./utils\";\r\nimport { debug, DebugColors } from \"./debug\";\r\n\r\nconst DOTENV_FILENAME = \".env\";\r\nconst DOTENV_LINE = /^\\s*([^\\#]+)\\s*=\\s*([^#]*)/m;\r\n\r\ninterface EnvType {\r\n    [key: string]: string;\r\n}\r\n\r\ninterface EnvManipulator {\r\n    /**\r\n     * Parses a .env file and returns an object containing the environment variables.\r\n     */\r\n    parse(file: Buffer | string): EnvType;\r\n    /**\r\n     * Configures the environment variables by reading the .env file and sets the variable\r\n     * if it does not exist.\r\n     */\r\n    configure(options: ConfigurableOptions): EnvType;\r\n\r\n    /**\r\n     * Programmatically set environment variables that are only available in the current process.\r\n     */\r\n    set(key: string, value: string): void;\r\n\r\n    /**\r\n     * Retrieve an environment variable from the current process.\r\n     */\r\n    get(key?: string): string;\r\n\r\n    /**\r\n     * Default filename for the .env file.\r\n     */\r\n    DOTENV_FILENAME: string;\r\n}\r\n\r\ninterface ConfigurableOptions {\r\n    /**\r\n     * When attempting to load the .env file, specify whether errors should be thrown or not,\r\n     *\r\n     * If set to false, operations will continue as normal.\r\n     *\r\n     * Defaults to `true`.\r\n     */\r\n    silent?: boolean;\r\n\r\n    /**\r\n     * When parsing variables, ensure that values are defined before attempting to set them.\r\n     *\r\n     * Defaults to `false`.\r\n     */\r\n    strict?: boolean;\r\n\r\n    /**\r\n     * The path to the .env file. Use only if you are attempting to load a file that is not\r\n     * in the root directory.\r\n     *\r\n     * Defaults to `process.cwd()`.\r\n     */\r\n    path?: string;\r\n\r\n    /**\r\n     * Control wether or not to overwrite existing environment variables.\r\n     */\r\n    overwrite?: boolean;\r\n\r\n    /**\r\n     * The encoding to use when reading the .env file.\r\n     *\r\n     * Defaults to `utf8`.\r\n     */\r\n    encoding?: BufferEncoding;\r\n\r\n    /**\r\n     * Show debug messages when loading the .env file.\r\n     *\r\n     * Includes errors, warnings, and success messages.\r\n     *\r\n     * Defaults to `false`.\r\n     */\r\n    debug?: boolean;\r\n}\r\n\r\nconst defaults: ConfigurableOptions = {\r\n    silent: true,\r\n    strict: false,\r\n    overwrite: false,\r\n    encoding: \"utf8\",\r\n    debug: false\r\n};\r\n\r\nclass EnvAgent implements EnvManipulator {\r\n    private $options: ConfigurableOptions = {};\r\n\r\n    public DOTENV_FILENAME = DOTENV_FILENAME;\r\n\r\n    get options() {\r\n        return this.$options;\r\n    }\r\n\r\n    private resolvePathName(): string {\r\n        if (this.options.path) {\r\n            return path.resolve(this.options.path);\r\n        } else {\r\n            return path.resolve(process.cwd(), DOTENV_FILENAME);\r\n        }\r\n    }\r\n\r\n    private handleErrorException(error: Error): void {\r\n        this.handleDebug(error.message, \"red\");\r\n\r\n        if (this.options.silent) {\r\n            return;\r\n        }\r\n\r\n        throw error;\r\n    }\r\n\r\n    private handleDebug(message: string, color: DebugColors): void {\r\n        if (this.options.debug) {\r\n            debug(message, color);\r\n        }\r\n    }\r\n\r\n    public create(): EnvAgent {\r\n        return new EnvAgent();\r\n    }\r\n\r\n    public parse(file: Buffer | string): EnvType {\r\n        try {\r\n            const environmentVariables: EnvType = {};\r\n            const fileAsString = file.toString();\r\n            const lines = fileAsString.replace(os.EOL, \"\\n\").split(/\\n/);\r\n\r\n            for (const potentialLine of lines) {\r\n                const isMatch = DOTENV_LINE.test(potentialLine);\r\n\r\n                if (!isMatch) {\r\n                    continue;\r\n                }\r\n\r\n                const line = potentialLine.match(DOTENV_LINE);\r\n\r\n                if (line === null) {\r\n                    continue;\r\n                }\r\n\r\n                const keyValuePairs = line.slice(1);\r\n\r\n                let key = keyValuePairs[0] ?? \"\";\r\n                let value = keyValuePairs[1] ?? \"\";\r\n\r\n                key = key.trim();\r\n                value = value.trim();\r\n\r\n                if (key) {\r\n                    if (this.options.strict && !value) {\r\n                        continue;\r\n                    }\r\n\r\n                    environmentVariables[key] = value;\r\n                }\r\n            }\r\n\r\n            return environmentVariables;\r\n        } catch (error: any) {\r\n            this.handleErrorException(error);\r\n\r\n            return {};\r\n        }\r\n    }\r\n\r\n    public configure(options: ConfigurableOptions = {}): EnvType {\r\n        this.$options = shallowMerge(defaults, options);\r\n\r\n        try {\r\n            const envPath = this.resolvePathName();\r\n            const encoding = this.options.encoding;\r\n\r\n            const file = fs.readFileSync(envPath, { encoding });\r\n\r\n            this.handleDebug(\"Found .env file\", \"green\");\r\n\r\n            const env = this.parse(file);\r\n\r\n            this.handleDebug(\"Parsed .env file\", \"green\");\r\n\r\n            if (Object.keys(env).length === 0) {\r\n                this.handleDebug(\r\n                    \"No environment variables found. You may have an empty .env file\",\r\n                    \"yellow\"\r\n                );\r\n                return {};\r\n            }\r\n\r\n            for (const key in env) {\r\n                if (hasOwnProperty(process.env, key)) {\r\n                    if (this.options.overwrite !== true) {\r\n                        this.handleDebug(\r\n                            `Environment variable ${key} already exists, skipping`,\r\n                            \"yellow\"\r\n                        );\r\n\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                this.set(key, env[key]);\r\n            }\r\n\r\n            return env;\r\n        } catch (error: any) {\r\n            this.handleErrorException(error);\r\n\r\n            return {};\r\n        }\r\n    }\r\n\r\n    public get(key?: string): string {\r\n        if (isUndefined(key)) {\r\n            this.handleDebug(\r\n                \"Attempted to retrieve an environment variable, but no key was passed\",\r\n                \"yellow\"\r\n            );\r\n\r\n            return \"\";\r\n        }\r\n\r\n        const value = process.env[key];\r\n\r\n        if (isUndefined(value)) {\r\n            return \"\";\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    public set(key: string, value: string): void {\r\n        process.env[key] = value;\r\n\r\n        this.handleDebug(`Set ${key} to ${value}`, \"green\");\r\n    }\r\n\r\n    public reset(): void {\r\n        this.$options = {};\r\n    }\r\n}\r\n\r\nconst envAgent = new EnvAgent();\r\n\r\nexport default envAgent;\r\n"],"names":["isUndefined","value","hasOwnProperty","obj","prop","shallowMerge","target","source","Object","assign","colors","red","yellow","green","globals","reset","bright","debug","message","color","prefix","colorizedMessage","console","log","DOTENV_FILENAME","DOTENV_LINE","defaults","silent","strict","overwrite","encoding","EnvAgent","$options","options","path","resolve","process","cwd","error","handleDebug","file","environmentVariables","fileAsString","toString","lines","replace","os","EOL","split","potentialLine","isMatch","test","line","match","keyValuePairs","slice","key","trim","handleErrorException","envPath","resolvePathName","fs","readFileSync","env","parse","keys","length","set","envAgent"],"mappings":"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"}